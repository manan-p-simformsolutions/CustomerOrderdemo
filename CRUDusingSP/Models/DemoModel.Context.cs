//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDusingSP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SPPracticeEntities : DbContext
    {
        public SPPracticeEntities()
            : base("name=SPPracticeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
    
        public virtual int AddAgent(string agentName, string workingArea, string commision, string phoneNo, string country)
        {
            var agentNameParameter = agentName != null ?
                new ObjectParameter("AgentName", agentName) :
                new ObjectParameter("AgentName", typeof(string));
    
            var workingAreaParameter = workingArea != null ?
                new ObjectParameter("WorkingArea", workingArea) :
                new ObjectParameter("WorkingArea", typeof(string));
    
            var commisionParameter = commision != null ?
                new ObjectParameter("Commision", commision) :
                new ObjectParameter("Commision", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAgent", agentNameParameter, workingAreaParameter, commisionParameter, phoneNoParameter, countryParameter);
        }
    
        public virtual int AddCustomer(string firstName, string lastName, string customerCity, string workingArea, string customerCountry, string grade, Nullable<decimal> openingAmount, Nullable<decimal> recevingAmount, Nullable<decimal> paymentAmount, Nullable<decimal> outstandingAmount, string phoneNo, Nullable<int> agentCode)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var customerCityParameter = customerCity != null ?
                new ObjectParameter("CustomerCity", customerCity) :
                new ObjectParameter("CustomerCity", typeof(string));
    
            var workingAreaParameter = workingArea != null ?
                new ObjectParameter("WorkingArea", workingArea) :
                new ObjectParameter("WorkingArea", typeof(string));
    
            var customerCountryParameter = customerCountry != null ?
                new ObjectParameter("CustomerCountry", customerCountry) :
                new ObjectParameter("CustomerCountry", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var recevingAmountParameter = recevingAmount.HasValue ?
                new ObjectParameter("RecevingAmount", recevingAmount) :
                new ObjectParameter("RecevingAmount", typeof(decimal));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var outstandingAmountParameter = outstandingAmount.HasValue ?
                new ObjectParameter("OutstandingAmount", outstandingAmount) :
                new ObjectParameter("OutstandingAmount", typeof(decimal));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var agentCodeParameter = agentCode.HasValue ?
                new ObjectParameter("AgentCode", agentCode) :
                new ObjectParameter("AgentCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomer", firstNameParameter, lastNameParameter, customerCityParameter, workingAreaParameter, customerCountryParameter, gradeParameter, openingAmountParameter, recevingAmountParameter, paymentAmountParameter, outstandingAmountParameter, phoneNoParameter, agentCodeParameter);
        }
    
        public virtual int AddOrder(Nullable<decimal> orderAmount, Nullable<decimal> advanceAmount, Nullable<System.DateTime> orderDate, Nullable<int> customerCode, string orderDescription)
        {
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(decimal));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var customerCodeParameter = customerCode.HasValue ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(int));
    
            var orderDescriptionParameter = orderDescription != null ?
                new ObjectParameter("OrderDescription", orderDescription) :
                new ObjectParameter("OrderDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrder", orderAmountParameter, advanceAmountParameter, orderDateParameter, customerCodeParameter, orderDescriptionParameter);
        }
    
        public virtual ObjectResult<AgentList_Result> AgentList(string search, Nullable<int> pageNumber, Nullable<int> pageSize, string sortOrder, Nullable<int> sortColumn)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var sortColumnParameter = sortColumn.HasValue ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgentList_Result>("AgentList", searchParameter, pageNumberParameter, pageSizeParameter, sortOrderParameter, sortColumnParameter);
        }
    
        public virtual ObjectResult<CustomerList_Result> CustomerList(string search, Nullable<int> pageNumber, Nullable<int> pageSize, string sortOrder, Nullable<int> sortColumn)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var sortColumnParameter = sortColumn.HasValue ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerList_Result>("CustomerList", searchParameter, pageNumberParameter, pageSizeParameter, sortOrderParameter, sortColumnParameter);
        }
    
        public virtual int DeleteAgent(Nullable<int> agentCode)
        {
            var agentCodeParameter = agentCode.HasValue ?
                new ObjectParameter("AgentCode", agentCode) :
                new ObjectParameter("AgentCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAgent", agentCodeParameter);
        }
    
        public virtual int DeleteCustomer(Nullable<int> customerCode)
        {
            var customerCodeParameter = customerCode.HasValue ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", customerCodeParameter);
        }
    
        public virtual int DeleteOrder(Nullable<int> orderNum)
        {
            var orderNumParameter = orderNum.HasValue ?
                new ObjectParameter("OrderNum", orderNum) :
                new ObjectParameter("OrderNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrder", orderNumParameter);
        }
    
        public virtual ObjectResult<FindAgent_Result> FindAgent(Nullable<int> agentCode)
        {
            var agentCodeParameter = agentCode.HasValue ?
                new ObjectParameter("AgentCode", agentCode) :
                new ObjectParameter("AgentCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindAgent_Result>("FindAgent", agentCodeParameter);
        }
    
        public virtual ObjectResult<FindCustomer_Result> FindCustomer(Nullable<int> customerCode)
        {
            var customerCodeParameter = customerCode.HasValue ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCustomer_Result>("FindCustomer", customerCodeParameter);
        }
    
        public virtual ObjectResult<FindOrder_Result> FindOrder(Nullable<int> orderNum)
        {
            var orderNumParameter = orderNum.HasValue ?
                new ObjectParameter("OrderNum", orderNum) :
                new ObjectParameter("OrderNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindOrder_Result>("FindOrder", orderNumParameter);
        }
    
        public virtual ObjectResult<OrderList_Result> OrderList(string search, Nullable<int> pageNumber, Nullable<int> pageSize, string sortOrder, Nullable<int> sortColumn)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var sortColumnParameter = sortColumn.HasValue ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderList_Result>("OrderList", searchParameter, pageNumberParameter, pageSizeParameter, sortOrderParameter, sortColumnParameter);
        }
    
        public virtual ObjectResult<PageAgentList_Result> PageAgentList(string search, Nullable<int> pageNumber, Nullable<int> pageSize, string sortOrder, Nullable<int> sortColumn)
        {
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var sortColumnParameter = sortColumn.HasValue ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PageAgentList_Result>("PageAgentList", searchParameter, pageNumberParameter, pageSizeParameter, sortOrderParameter, sortColumnParameter);
        }
    
        public virtual ObjectResult<ShowList_Result> ShowList(Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> startdate, Nullable<System.DateTime> endDate, Nullable<int> sortColumn, string sortOrder)
        {
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var sortColumnParameter = sortColumn.HasValue ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowList_Result>("ShowList", pageNumberParameter, pageSizeParameter, startdateParameter, endDateParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual int UpdateAgent(Nullable<int> agentCode, string agentName, string workingArea, string commision, string phoneNo, string country)
        {
            var agentCodeParameter = agentCode.HasValue ?
                new ObjectParameter("AgentCode", agentCode) :
                new ObjectParameter("AgentCode", typeof(int));
    
            var agentNameParameter = agentName != null ?
                new ObjectParameter("AgentName", agentName) :
                new ObjectParameter("AgentName", typeof(string));
    
            var workingAreaParameter = workingArea != null ?
                new ObjectParameter("WorkingArea", workingArea) :
                new ObjectParameter("WorkingArea", typeof(string));
    
            var commisionParameter = commision != null ?
                new ObjectParameter("Commision", commision) :
                new ObjectParameter("Commision", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAgent", agentCodeParameter, agentNameParameter, workingAreaParameter, commisionParameter, phoneNoParameter, countryParameter);
        }
    
        public virtual int UpdateCustomer(Nullable<int> customerCode, string firstName, string lastName, string customerCity, string workingArea, string customerCountry, string grade, Nullable<decimal> openingAmount, Nullable<decimal> recevingAmount, Nullable<decimal> paymentAmount, Nullable<decimal> outstandingAmount, string phoneNo, Nullable<int> agentCode)
        {
            var customerCodeParameter = customerCode.HasValue ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var customerCityParameter = customerCity != null ?
                new ObjectParameter("CustomerCity", customerCity) :
                new ObjectParameter("CustomerCity", typeof(string));
    
            var workingAreaParameter = workingArea != null ?
                new ObjectParameter("WorkingArea", workingArea) :
                new ObjectParameter("WorkingArea", typeof(string));
    
            var customerCountryParameter = customerCountry != null ?
                new ObjectParameter("CustomerCountry", customerCountry) :
                new ObjectParameter("CustomerCountry", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var recevingAmountParameter = recevingAmount.HasValue ?
                new ObjectParameter("RecevingAmount", recevingAmount) :
                new ObjectParameter("RecevingAmount", typeof(decimal));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var outstandingAmountParameter = outstandingAmount.HasValue ?
                new ObjectParameter("OutstandingAmount", outstandingAmount) :
                new ObjectParameter("OutstandingAmount", typeof(decimal));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var agentCodeParameter = agentCode.HasValue ?
                new ObjectParameter("AgentCode", agentCode) :
                new ObjectParameter("AgentCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", customerCodeParameter, firstNameParameter, lastNameParameter, customerCityParameter, workingAreaParameter, customerCountryParameter, gradeParameter, openingAmountParameter, recevingAmountParameter, paymentAmountParameter, outstandingAmountParameter, phoneNoParameter, agentCodeParameter);
        }
    
        public virtual int UpdeteOrder(Nullable<int> orderNum, Nullable<decimal> orderAmount, Nullable<decimal> advanceAmount, Nullable<System.DateTime> orderDate, Nullable<int> customerCode, string orderDescription)
        {
            var orderNumParameter = orderNum.HasValue ?
                new ObjectParameter("OrderNum", orderNum) :
                new ObjectParameter("OrderNum", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("OrderAmount", orderAmount) :
                new ObjectParameter("OrderAmount", typeof(decimal));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var customerCodeParameter = customerCode.HasValue ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(int));
    
            var orderDescriptionParameter = orderDescription != null ?
                new ObjectParameter("OrderDescription", orderDescription) :
                new ObjectParameter("OrderDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdeteOrder", orderNumParameter, orderAmountParameter, advanceAmountParameter, orderDateParameter, customerCodeParameter, orderDescriptionParameter);
        }
    }
}
